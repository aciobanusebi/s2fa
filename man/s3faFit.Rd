% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s3faFit.R
\name{s3faFit}
\alias{s3faFit}
\title{Fit S3FA to data via EM/S3FA}
\usage{
s3faFit(X_t_supervised, Z_t_supervised, X_t_unsupervised, params = NULL,
  type = "fa", lambdaRidge = 0, checkArgs = TRUE,
  checkPositiveDefinite = FALSE, epsilon = 1e-10,
  maxIterations = 100, stopType = "parameter", turboEmMethods = NULL)
}
\arguments{
\item{X_t_supervised}{train input data (which has output) as design matrix (must be matrix, not data.frame), i.e. row = instance, column = feature/attribute}

\item{Z_t_supervised}{train output data (for X_t_supervised) as design matrix (must be matrix, not data.frame), i.e. row = instance, column = feature/attribute}

\item{X_t_unsupervised}{train input data (which has no output) as design matrix (must be matrix, not data.frame), i.e. row = instance, column = feature/attribute}

\item{params}{initialization parameters; can be NULL if no parameters are to be provided; check fitFaInit function if you want to set this}

\item{type}{"unconstrained", "fa", or "ppca"; refers to psi}

\item{lambdaRidge}{L2 regularization term; must be a number}

\item{checkArgs}{whether to check the arguments are valid; it takes more time to execute}

\item{checkPositiveDefinite}{whether to check the covariance matrices are valid; it takes more time to execute}

\item{epsilon}{tolerance parameter regarding iteration stop; the stop criterion is something like this: if |old-new|/|old| < epsilon then STOP, where old, new are loglikelihoods (|a| is module) or parameters (|a| is L2 norm squared); this last part is controlled via "stopType" parameter}

\item{maxIterations}{maximum number of iterations}

\item{stopType}{"parameter" or "objfn"}

\item{turboEmMethods}{if it is NULL, then a plot of log-likelihoods is provided; if it is not NULL, it must be a vector of methods accepted in the 'turboEM' package, e.g. c("em","squarem","pem"), and, in this case, the parameters corresponding to the first method in turboEmMethods are returned; additional information may be printed}
}
\value{
final parameters learnt by EM/S3FA, i.e. a list containing nDimX, nDimZ, type, mu_z_t, Sigma_z_t, mu_t, lambda_t, psi_t. "_t" comes from "transpose"
}
\description{
Fit S3FA to data via EM/S3FA
}
\examples{
params0 <- s3faInit(X_t_supervised = house[1:10,2:3,drop=FALSE],
                    Z_t_supervised = house[1:10,1,drop=FALSE],
                    X_t_unsupervised = house[11:20,2:3,drop=FALSE],
                    type = "fa",
                    checkArgs = TRUE)
params <- s3faFit(X_t_supervised = house[1:10,2:3,drop=FALSE],
                  Z_t_supervised = house[1:10,1,drop=FALSE],
                  X_t_unsupervised = house[11:20,2:3,drop=FALSE],
                  params=params0,
                  type="fa",
                  lambdaRidge=0,
                  checkArgs=FALSE,
                  checkPositiveDefinite=FALSE,
                  epsilon=1e-10,
                  maxIterations=100,
                  stopType="parameter",
                  turboEmMethods=c("em","pem"))
params

params <- s3faFit(X_t_supervised = house[1:10,2:3,drop=FALSE],
                  Z_t_supervised = house[1:10,1,drop=FALSE],
                  X_t_unsupervised = house[11:20,2:3,drop=FALSE],
                  params=NULL,
                  type="un",
                  lambdaRidge=0,
                  checkArgs=FALSE,
                  checkPositiveDefinite=FALSE,
                  epsilon=1e-10,
                  maxIterations=100,
                  stopType="objfn",
                  turboEmMethods=NULL)
params

}
