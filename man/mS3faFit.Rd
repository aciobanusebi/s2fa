% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mS3faFit.R
\name{mS3faFit}
\alias{mS3faFit}
\title{Fit MS3FA to data via EM/MS3FA}
\usage{
mS3faFit(trainInput, trainOutput, params, type = "fa",
  lambdaRidge = lambdaRidge, epsilon = 1e-10, maxIterations = 100,
  stopType = "parameter", turboEmMethods = NULL)
}
\arguments{
\item{trainInput}{train input data; can contain NAs; error if a full row (input+output) is NA}

\item{trainOutput}{train output data; can contain NAs; error if a full row (input+output) is NA}

\item{params}{initialization parameters; can be NULL if no parameters are to be provided; check fitFaInit function if you want to set this}

\item{type}{"unconstrained", "fa", or "ppca"; refers to psi}

\item{lambdaRidge}{L2 regularization term; must be a number}

\item{epsilon}{tolerance parameter regarding iteration stop; the stop criterion is something like this: if |old-new|/|old| < epsilon then STOP, where old, new are loglikelihoods (|a| is module) or parameters (|a| is L2 norm squared); this last part is controlled via "stopType" parameter}

\item{maxIterations}{maximum number of iterations}

\item{stopType}{"parameter" or "objfn"}

\item{turboEmMethods}{if it is NULL, then a plot of log-likelihoods is provided; if it is not NULL, it must be a vector of methods accepted in the 'turboEM' package, e.g. c("em","squarem","pem"), and, in this case, the parameters corresponding to the first method in turboEmMethods are returned; additional information may be printed}
}
\value{
final parameters learnt by EM/MS3FA, i.e. a list containing nDimX, nDimZ, type, mu_z_t, Sigma_z_t, mu_t, lambda_t, psi_t. "_t" comes from "transpose"
}
\description{
Fit MS3FA to data via EM/MS3FA
}
\examples{
houseCopy <- house
houseCopy[1:10,2:3] <- NA
houseCopy[11:20,1] <- NA
params0 <- mS3faInit(trainInput=houseCopy[,2:3,drop=FALSE],
                     trainOutput=houseCopy[,1,drop=FALSE],
                     type="fa")
params <- mS3faFit(trainInput=houseCopy[,2:3,drop=FALSE],
                   trainOutput=houseCopy[,1,drop=FALSE],
                   params=params0,
                   type="fa",
                   lambdaRidge=0,
                   epsilon=1e-10,
                   maxIterations=100,
                   stopType="parameter",
                   turboEmMethods=c("em","pem"))
params <- mS3faFit(trainInput=houseCopy[,2:3,drop=FALSE],
                   trainOutput=houseCopy[,1,drop=FALSE],
                   params=NULL,
                   type="ppca",
                   lambdaRidge=0,
                   epsilon=1e-10,
                   maxIterations=100,
                   stopType="objfn",
                   turboEmMethods=NULL)
}
